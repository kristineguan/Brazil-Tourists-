dataset=data.frame(x=c(5,-3,2,4),y=c(2,1,-1,3))
fit=lm(y~x,data=dataset)
summry(fit)
summary(fit)
##we can see we got the same answer!
##as we can see we got the same answer!
y=c(533417,355159,414851,462021,472851,489544,415517,413015,442646,480434)
x=c(21.88,22.78,22.5,22,01,22.04,21.94,21.96,21.86,21.6,21.63)
fit=lm(y~x)
fit=lm(y~x)
y=c(533417,355159,414851,462021,472851,489544,415517,413015,442646,480434)
x=c(21.88,22.78,22.5,22.01,22.04,21.94,21.96,21.86,21.6,21.63)
fit=lm(y~x)
summary(fit)
plot(x~y)
abline(fit)
abline(fit,col="red", lw=4)
y=c(533417,355159,414851,462021,472851,489544,415517,413015,442646,480434)
x=c(21.88,22.78,22.5,22.01,22.04,21.94,21.96,21.86,21.6,21.63)
fit=lm(y~x)
summary(fit)
plot(x~y)
abline(fit,col="red", lw=4)
abline
y=c(533417,355159,414851,462021,472851,489544,415517,413015,442646,480434)
x=c(21.88,22.78,22.5,22.01,22.04,21.94,21.96,21.86,21.6,21.63)
fit=lm(y~x)
summary(fit)
x=c(533417,355159,414851,462021,472851,489544,415517,413015,442646,480434)
y=c(21.88,22.78,22.5,22.01,22.04,21.94,21.96,21.86,21.6,21.63)
fit=lm(y~x)
summary(fit)
plot(x~y)
abline(fit,col="red", lw=4)
abline
abline(fit,col="red", lw=4)
plot(x~y)
summary(fit)
y=c(533417,355159,414851,462021,472851,489544,415517,413015,442646,480434)
x=c(21.88,22.78,22.5,22.01,22.04,21.94,21.96,21.86,21.6,21.63)
fit=lm(y~x)
summary(fit)
a=c(349555,385922,389156,416898,368259,374127,350777,300552,377065,361609)
b=c(21.76,21.97,21.56,21.36,21.40,21.37,21.19,21.16,20.70,21.07)
fit1=lm(a~b)
summary(fit1)
a=c(349555,385922,389156,416898,368259,374127,350777,300552,377065,361609)
b=c(21.76,21.97,21.56,21.36,21.40,21.37,21.19,21.16,20.70,21.07)
fit1=lm(b~a)
summary(fit1)
a=c(349555,385922,389156,416898,368259,374127,350777,300552,377065,361609)
b=c(21.76,21.97,21.56,21.36,21.40,21.37,21.19,21.16,20.70,21.07)
fit1=lm(b~a)
summary(fit1)
a=c(349555,385922,389156,416898,368259,374127,350777,300552,377065,361609)
b=c(21.76,21.97,21.56,21.36,21.40,21.37,21.19,21.16,20.70,21.07)
fit1=lm(a~b)
summary(fit1)
plot(fit1)
y=c(533417,355159,414851,462021,472851,489544,415517,413015,442646,480434)
x=c(21.876563,22.778571,22.496552,22.011429,22.041463,21.942105,21.964103,21.861765,21.602632,21.627273)
fit2=lm(y~x)
summary(fit2)
#a v*w
v=c(1,-1,3)
w=c(2,1,-1)
a=v%*%w
a
#b -3*w
b=-3%*%w
b
M=matrix(c(20,15,0,5,25,10,0,20,5),nrow=3,ncol=3,byrow=T)
c=M%*%v
#c M*v
c
#d M+N
N=matrix(c(-20,5,10,0,-10,10,5,20,-5),nrow=3,ncol=3,byrow=T)
d=M+N
d
#e M-N
e=M-N
e
#f transposeZ
Z=matrix(c(1,5,1,-3,1,2,1,4),nrow=4,ncol=2,byrow=T)
f=t(Z)
f
#g transposeZ*Z
g=t(Z)%*%Z
g
#h inverse(transposeZ*Z)
library(MASS)
h=ginv(t(Z)%*%Z)
#i transpose(Z)*Y
Y=c(2,1,-1,3)
i=t(Z)%*%Y
i
#j inverse(transposeZ*Z)*transpose(Z)*Y
j=ginv(t(Z)%*%Z)%*%t(Z)%*%Y
j
#det(transposeZ*Z)
det(t(Z)%*%Z)
#create a dataset with x = <5, -3, 2, 4> and y = <2, 1, -1, 3> and run a
#regression analysis on the data.
dataset=data.frame(x=c(5,-3,2,4),y=c(2,1,-1,3))
fit=lm(y~x,data=dataset)
summary(fit)
#####as we can see we got the same answer!
source('E:/courses/CSC424 Advanced Data Analysis/assignment/DataFiles-homework1/Matrix.R')
#a v*w
v=c(1,-1,3)
w=c(2,1,-1)
a=v%*%w
a
#b -3*w
b=-3%*%w
b
#c M*v
M=matrix(c(20,15,0,5,25,10,0,20,5),nrow=3,ncol=3,byrow=T)
c=M%*%v
c
#d M+N
N=matrix(c(-20,5,10,0,-10,10,5,20,-5),nrow=3,ncol=3,byrow=T)
d
d=M+N
#e M-N
e=M-N
e
#f transposeZ
Z=matrix(c(1,5,1,-3,1,2,1,4),nrow=4,ncol=2,byrow=T)
f=t(Z)
f
#g transposeZ*Z
g=t(Z)%*%Z
g
#h inverse(transposeZ*Z)
library(MASS)
h=ginv(t(Z)%*%Z)
#i transpose(Z)*Y
Y=c(2,1,-1,3)
i
i=t(Z)%*%Y
#j inverse(transposeZ*Z)*transpose(Z)*Y
j=ginv(t(Z)%*%Z)%*%t(Z)%*%Y
j
#det(transposeZ*Z)
det(t(Z)%*%Z)
#create a dataset with x = <5, -3, 2, 4> and y = <2, 1, -1, 3> and run a
dataset=data.frame(x=c(5,-3,2,4),y=c(2,1,-1,3))
#regression analysis on the data.
fit=lm(y~x,data=dataset)
summary(fit)
#####as we can see we got the same answer!
help(pcomp)
help(pcomp)
help(prcomp)
library(car)
library(corrplot)
library(ggplot2)
#############################################################################################
# A useful funciton for visualizing the first two principal components
#############################################################################################
PCA_Plot = function(pcaData)
{
library(ggplot2)
theta = seq(0,2*pi,length.out = 100)
x1 = rnorm(100)
x2 = 2 * x1 + rnorm(100, 0, .7)
# Make a data.frame out of it and explore it
d = data.frame(x1, x2)
cov(d)
plot(d, pch=16, col="red", xlim=c(-6, 6), ylim=c(-6, 6))
# Transform the variables and plot
z1 = .43*x1 + .9*x2
z2 = -.9*x1 + .43*x2
dTrans = data.frame(z1, z2)
plot(dTrans, pch=16, col="red", xlim=c(-6, 6), ylim=c(-6, 6))
# Check out the correlation of the data
corM = cor(d)
print(corM)
# Check out the covariance of the data
covM = cov(d)
print(covM)
# Now, compute the principal components and investigate
p = prcomp(d)
print(p)
summary(p)
x1 = rnorm(100)
x2 = 2 * x1 + rnorm(100, 0, .7)
library(car)
library(corrplot)
library(ggplot2)
x1 = rnorm(100)
x2 = 2 * x1 + rnorm(100, 0, .7)
x1 = rnorm(100)
x2 = 2 * x1 + rnorm(100, 0, .7)
# Make a data.frame out of it and explore it
d = data.frame(x1, x2)
cov(d)
plot(d, pch=16, col="red", xlim=c(-6, 6), ylim=c(-6, 6))
x1 = rnorm(100)
x2 = 2 * x1 + rnorm(100, 0, .7)
d = data.frame(x1, x2)
cov(d)
Z=matrix(c(0,1,-2,-3),ncol=2,byrow=TRUE)
Z
prcomp(Z)
names(prcomp(Z))
summary(prcomp(Z))
prcomp$scale
prcomp(Z)$scale
U=prcomp(Z)
names(U)
U$scale
U$x
U$scale
summary(U)
eigen(Z)
Z=matrix(c(1,1,1,2.5),ncol=2,byrow=TRUE)
Z
eigen(Z)
v=c(1,2)
P=Z%*%V
P=Z%*%v
P
Z=matrix(c(1,1,1,2.5),ncol=2,byrow=TRUE)
Z
eigen(Z)
v=c(1,2)
P=Z%*%v
P
cor(P)
M=matrix(c(1,1,1,2.5),ncol=2,byrow=TRUE)
M
eigen(M)
N=matrix(c(.4,.88,-.28,.88,1.1,-9.8,-.28,-.98,2.26),ncol=3,nrow=3,byrow=TRUE)
N
v=c(1,2,-3)
v
O=N%*%V
O=N%*%v
O
N=matrix(c(.4,.88,-.28,.88,1.1,-.98,-.28,-.98,2.26),ncol=3,nrow=3,byrow=TRUE)
N
v=c(1,2,-3)
v
O=N%*%v
O
eigen(N)
help(options)
options(digits=2)
eigen(M)$vectors
options(scipen=100,digits=2)
eigen(M)$vectors
eigen(M)
eigen(M)
#compute the eigenvalues and eigenvectors of M
M=matrix(c(1,1,1,2.5),ncol=2,byrow=TRUE)
M
eigen(M)
#Verify v is an eigenvector of N
N=matrix(c(.4,.88,-.28,.88,1.1,-.98,-.28,-.98,2.26),ncol=3,nrow=3,byrow=TRUE)
N
v=c(1,2,-3)
v
O=N%*%v
O
options(scipen=0,digits=7)
#compute the eigenvalues and eigenvectors of M
M=matrix(c(1,1,1,2.5),ncol=2,byrow=TRUE)
M
eigen(M)
#Verify v is an eigenvector of N
N=matrix(c(.4,.88,-.28,.88,1.1,-.98,-.28,-.98,2.26),ncol=3,nrow=3,byrow=TRUE)
N
v=c(1,2,-3)
v
O=N%*%v
O
options(scipen=0,digits=7)
options(op)
options(digits)
help("princomp")
M=c(2,1,-1,3,)
M=c(2,1,-1,3)
M1=as.matrix(M)
M1=matrix(M,ncol=2,byrow=TRUE)
M1
N=c(1,0,3,1)
N1=matrix(N,ncol = 2,byrow = TRUE)
N1
M1%*%N1
t(M1%*%N1)
t(M1)
t(N1)
t(M1)%*%t(N1)
t(N1)%*%t(M1)
M%*N
M%*%N
N%*%M
M=c(2,1,-1,3)
plot(M)
A=c(1,2)
plot(A)
A=c(1,)
A=c(1,0)
plot(A)
M1=matrix(M,ncol=2,byrow=TRUE)
M1
plot(M1)
M1%*%A
A1=M1%*%A
plot(A1)
install.packages("ggplot2")
library(ggplot2)
mtcars
head(mtcars)
mtcars$gear=factor(mtcars$gear,levels = c(3,4,5),labels = c('3gear','4gear','5gear'))
head(mtcars)
mtcars$am=factor(mtcars$am,levels = c(0,1),labels=c('automatic','manual'))
mtcars$cyl=factor(mtcars$am,levels = c(4,6,8),labels=c('4cyl','6cyl','8cyl'))
head(mtcars)
mtcars$cyl=factor(mtcars$cyl,levels = c(4,6,8),labels=c('4cyl','6cyl','8cyl'))
head(mtcars)
head(mtcars)
head(mtcars)
library(ggplot2)
head(mtcars)
mtcars$gear=factor(mtcars$gear,levels = c(3,4,5),labels = c('3gear','4gear','5gear'))
head(mtcars)
mtcars$am=factor(mtcars$am,levels = c(0,1),labels=c('automatic','manual'))
mtcars$cyl=factor(mtcars$cyl,levels = c(4,6,8),labels=c('4cyl','6cyl','8cyl'))
install.packages("dplyr")
install.packages("mosaic")
install.packages("lubridate")
head(Births)
Births <- mutate( Births78,
date=mdy(date) - years(100), # y2k fix
wd = wday(date), # as a number
wday = wday(date, label=TRUE, abbr=TRUE)
)
head(Births, 2)
head(Births78)
head(Births)
head(Births78)
head(EuStockMarkets)
ds = as.data.frame(EuStockMarkets)
head(ds)
ds$day = seq(nrow(ds))    # Add a sequential count of the records to indicate the "day"
library(reshape)
head(ds)
require(dplyr)
require(mosaic)
require(lubridate)
head(Births78)
head(ds)
EuStock = melt(ds, id=c("day"))
head(ds)
EuStock = melt(ds, id=c("day"))
head(EuStock)
names(EuStock)[2] = "Index"
head(EuStock)
View(EuStock)
ggplot(EuStock, aes(day, value, color=Index)) + geom_line()
library(ggplot2)
head(mtcars)
mtcars$gear=factor(mtcars$gear,levels = c(3,4,5),labels = c('3gear','4gear','5gear'))
head(mtcars)
mtcars$am=factor(mtcars$am,levels = c(0,1),labels=c('automatic','manual'))
mtcars$cyl=factor(mtcars$cyl,levels = c(4,6,8),labels=c('4cyl','6cyl','8cyl'))
qplot(mpg,data=mtcars,geom = 'density',fill=gear)
qplot(mpg,data=mtcars,geom = 'density',fill=gear,alpha=I(0.5),main='Distribution of Gas Milage',
xlab='Miles per Gallon',ylab='Density')
library(ggplot2)
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
mtcars$am <- factor(mtcars$am,levels=c(0,1),
labels=c("Automatic","Manual"))
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
qplot(mpg, data=mtcars, geom="density", fill=gear,
alpha=I(.5),
main="Distribution of Gas Milage",
xlab="Miles Per Gallon",
ylab="Density")
qplot(mpg, data=mtcars, geom="density", fill=gear,
alpha=I(.5),
main="Distribution of Gas Milage",
xlab="Miles Per Gallon",
ylab="Density")
head(mtcars)
head(mtcars)
V1=c(1,2,1)
V2=c(2,1,2)
M=[(0,1,1),(1,2,0),(1,0,1)]
M=c[(0,1,1),(1,2,0),(1,0,1)]
M=data.frame((0,1,1),(1,2,0),(1,0,1))
M=data.frame(c(0,1,1),c(1,2,0),c(1,0,1))
M
V1+V2
V1-V2
length(V1)
M*V1
M*M
N=matrix(c(0,1,1,1,2,0,1,0,1),nrow=3,ncol=3,byrow=T)
N
N*N
N%*%N
N%*%V1
N%*%N%*%N%*%N%*%N
install.packages("rugarch")
install.packages("shiny")
library(shiny)
library(shiny)
library(shiny)
library(datasets)
shiny::runApp('E:/personal project/R-Shiny/brazil tourists')
shiny::runApp('E:/personal project/R-Shiny/brazil tourists')
hist(TS$Count,
breaks=seq(1,max(TS$Count),l=input$bins+1),
xlab = 'Tourists Count(K)',
main = 'Histogram of Brazil Tourists Count by Month')
myd=read.table("touristDataTransClean.csv",header=T, sep=',')
head(myd)
#Extract Time Data(Year,Month,Count)
TimeData = myd[,5:7]
dataframe = as.data.frame(TimeData)
TS=ddply(dataframe, .(Year, Month), numcolwise(sum))
setwd("E:/personal project/R-Shiny/brazil tourists")
myd=read.table("touristDataTransClean.csv",header=T, sep=',')
head(myd)
#Extract Time Data(Year,Month,Count)
TimeData = myd[,5:7]
dataframe = as.data.frame(TimeData)
TS=ddply(dataframe, .(Year, Month), numcolwise(sum))
hist(TS$Count,
breaks=seq(1,max(TS$Count),l=input$bins+1),
xlab = 'Tourists Count(K)',
main = 'Histogram of Brazil Tourists Count by Month')
hist(TS$Count,
breaks=seq(1,max(TS$Count),l=5+1),
xlab = 'Tourists Count(K)',
main = 'Histogram of Brazil Tourists Count by Month')
hist(TS$Count,
breaks=seq(min(TS$Count),max(TS$Count),l=input$bins+1),
xlab = 'Tourists Count(K)',
main = 'Histogram of Brazil Tourists Count by Month')
hist(TS$Count,
breaks=seq(min(TS$Count),max(TS$Count),l=8+1),
xlab = 'Tourists Count(K)',
main = 'Histogram of Brazil Tourists Count by Month')
hist(TS$Count/1000,
breaks=seq(min(TS$Count/1000),max(TS$Count/1000),l=8+1),
xlab = 'Tourists Count(K)',
main = 'Histogram of Brazil Tourists Count by Month')
hist(TS$Count/10000,
breaks=seq(min(TS$Count/10000),max(TS$Count/10000),l=8+1),
xlab = 'Tourists Count(K)',
main = 'Histogram of Brazil Tourists Count by Month')
hist(TS$Count/10000,
breaks=seq(0,max(TS$Count/10000),l=8+1),
xlab = 'Tourists Count(K)',
main = 'Histogram of Brazil Tourists Count by Month')
shiny::runApp()
shiny::runApp()
shiny::runApp()
TS=ddply(dataframe, .(Year), numcolwise(sum))
head(TS)
ddply(myd,.(Year),numcolwise(sum))
shiny::runApp()
ddply(myd, .(c('Year','Month')), numcolwise(sum))
ddply(myd, .('Year','Month'), numcolwise(sum))
ddply(myd, .(Year,Month), numcolwise(sum))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("E:/personal project/R-Shiny/brazil tourists")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
1989
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
print(input$time)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
myd=read.table("touristDataTransClean.csv",header=T, sep=',')
shinyServer(function(input, output) {
range=as.numeric(input$time)
print(range)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
