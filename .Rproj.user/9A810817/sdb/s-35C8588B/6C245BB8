{
    "contents" : "library(shinydashboard)\n\nskin <- Sys.getenv(\"DASHBOARD_SKIN\")\nskin <- tolower(skin)\nif (skin == \"\")\n  skin <- \"black\"\n\n\nsidebar <- dashboardSidebar(\n  sidebarSearchForm(label = \"Search...\", \"searchText\", \"searchButton\"),\n  sidebarMenu(\n    menuItem(\"Dashboard\", tabName = \"dashboard\", icon = icon(\"dashboard\")),\n    menuItem(\"Widgets\", icon = icon(\"th\"), tabName = \"widgets\", badgeLabel = \"new\",\n             badgeColor = \"green\"\n    ),\n    menuItem(\"Charts\", icon = icon(\"bar-chart-o\"),\n      menuSubItem(\"Chart sub-item 1\", tabName = \"subitem1\"),\n      menuSubItem(\"Chart sub-item 2\", tabName = \"subitem2\")\n    ),\n    menuItem(\"Built By\", icon = icon(\"file-code-o\"),\n      href = \"https://www.youtube.com/watch?v=sc4WxfJFvh4&list=PLyD1XCIRA3gTfulK7bZnqSkPLeSVffKpQ\"\n    )\n  )\n)\n\nbody <- dashboardBody(\n  tabItems(\n    tabItem(\"dashboard\",\n            \n            # Boxes with solid headers\n            fluidRow(\n              # box(\n              #   title = \"Histogram control\", width = 4, solidHeader = TRUE, status = \"primary\",\n              #   sliderInput(\"count\", \"Count\", min = 1, max = 500, value = 120)\n              # ),\n              box(\n                title = \"Enter Stock Code\", width = 4, solidHeader = TRUE, status = \"primary\",\n                textInput(\"StockCode\", \"StockCode\", value = \"AAPL\"),\n                radioButtons(\"seasonal\", \"Select\", c(NonSeasonal = \"NonSeasonal\", Seasonal = \"Seasonal\")),\n                actionButton(inputId = \"click\", label = \"Predict\")\n              )\n              # ,box(\n              #   title = \"Appearance\",\n              #   width = 2, solidHeader = TRUE,\n              #   radioButtons(\"fill\", \"Fill\", # inline = TRUE,\n              #                c(None = \"none\", Blue = \"blue\", Black = \"black\", red = \"red\")\n              #   )\n              # ),\n              # box(\n              #   title = \"Scatterplot control\",\n              #   width = 2, solidHeader = TRUE, status = \"warning\",\n              #   selectInput(\"spread\", \"Spread\",\n              #               choices = c(\"0%\" = 0, \"20%\" = 20, \"40%\" = 40, \"60%\" = 60, \"80%\" = 80, \"100%\" = 100),\n              #               selected = \"60\"\n              #   )\n              # )\n            ),\n      fluidRow(\n        \n        box(\n          title = \"Auto Arima - Non Seasonal\",\n          status = \"primary\",\n          plotOutput(\"auto.arima\", height = 350),\n          height = 400\n        ),\n        box(\n          title = \"Auto Arima - Non Seasonal\",\n          \n          width = 6,\n          tableOutput(\"auto.arima1\"),\n          height = 380\n        )\n        \n      ),\n      \n      fluidRow(\n        \n        box(\n          title = \"Auto Arima Seasonal\",\n          status = \"primary\",\n          plotOutput(\"arima.seasonal\", height = 350),\n          height = 400\n        ),\n        box(\n          title = \"Auto Arima Seasonal\",\n          \n          width = 6,\n          tableOutput(\"arima.seasonal1\"),\n          height = 380\n        )\n        \n      )\n      \n      \n      # ,\n      # Solid backgrounds\n      # fluidRow(\n      #           box(\n      #     title = \"Distribution\",\n      #     status = \"primary\",\n      #     plotOutput(\"plot1\", height = 240),\n      #     height = 300\n      #   ),\n      #   tabBox(\n      #     height = 300,\n      #     tabPanel(\"View 1\",\n      #              plotOutput(\"scatter1\", height = 230)\n      #     ),\n      #     tabPanel(\"View 2\",\n      #              plotOutput(\"scatter2\", height = 230)\n      #     )\n      #   \n      #     )\n      # \n      #   ) #fluidRow Solid backgrounds\n    )\n  )\n)\n\nmessages <- dropdownMenu(type = \"messages\",\n  messageItem(\n    from = \"Sales Dept\",\n    message = \"Sales are steady this month.\"\n  ),\n  messageItem(\n    from = \"New User\",\n    message = \"How do I register?\",\n    icon = icon(\"question\"),\n    time = \"13:45\"\n  ),\n  messageItem(\n    from = \"Support\",\n    message = \"The new server is ready.\",\n    icon = icon(\"life-ring\"),\n    time = \"2014-12-01\"\n  )\n)\n\nnotifications <- dropdownMenu(type = \"notifications\", badgeStatus = \"warning\",\n  notificationItem(\n    text = \"5 new users today\",\n    icon(\"users\")\n  ),\n  notificationItem(\n    text = \"12 items delivered\",\n    icon(\"truck\"),\n    status = \"success\"\n  ),\n  notificationItem(\n    text = \"Server load at 86%\",\n    icon = icon(\"exclamation-triangle\"),\n    status = \"warning\"\n  )\n)\n\ntasks <- dropdownMenu(type = \"tasks\", badgeStatus = \"success\",\n  taskItem(value = 90, color = \"green\",\n    \"Documentation\"\n  ),\n  taskItem(value = 17, color = \"aqua\",\n    \"Project X\"\n  ),\n  taskItem(value = 75, color = \"yellow\",\n    \"Server deployment\"\n  ),\n  taskItem(value = 80, color = \"red\",\n    \"Overall project\"\n  )\n)\n\nheader <- dashboardHeader(\n  title = \"Executive Dashboard\",\n  messages,\n  notifications,\n  tasks\n)\n\nui <- dashboardPage(header, sidebar, body, skin = skin)\n\nserver <- function(input, output) {\n\n  \n  set.seed(122)\n  histdata <- rnorm(500)\n\n  output$plot1 <- renderPlot({\n    if (is.null(input$count) || is.null(input$fill))\n      return()\n\n    data <- histdata[seq(1, input$count)]\n    color <- input$fill\n    if (color == \"none\")\n      color <- NULL\n    hist(data, col = color, main = NULL)\n  })\n  \n  \n#Auto.Arima - plot here  Tile#4 \n  output$auto.arima <- renderPlot({\n    \n  \n    # if (is.null(input$StockCode))\n    #   return()\n    library('quantmod')\n    library('ggplot2')\n    library('forecast')\n    library('tseries')\n    #Stock <- as.character(input$StockCode)\n    \n    data <- eventReactive(input$click, {\n      (input$StockCode) \n    })\n    Stock <- as.character(data())\n    print(Stock)\n    #getSymbols(\"AAPL\", src = \"yahoo\",from=\"2017-07-01\")\n   # plot(AAPL$AAPL.Close)  \n    Stock_df<-as.data.frame(getSymbols(Symbols = Stock, \n                                   src = \"yahoo\", from = \"2016-01-01\", env = NULL))\n    Stock_df$Open = Stock_df[,1]\n    Stock_df$High = Stock_df[,2]\n    Stock_df$Low = Stock_df[,3]\n    Stock_df$Close = Stock_df[,4]\n    Stock_df$Volume = Stock_df[,5]\n    Stock_df$Adj = Stock_df[,6]\n    Stock_df <- Stock_df[,c(7,8,9,10,11,12)] \n    \n    \n    \n    #plot(as.ts(Stock_df$Close))\n    \n    Stock_df$v7_MA = ma(Stock_df$Close, order=7)\n    Stock_df$v30_MA <- ma(Stock_df$Close, order=30)\n    \n    #STL\n    rental_ma <- ts(na.omit(Stock_df$v7_MA), frequency=30)\n    decomp_rental <- stl(rental_ma, s.window=\"periodic\")\n    #plot(decomp_rental)\n    adj_rental <- seasadj(decomp_rental)\n    #plot(adj_rental)\n    \n    \n    #arima\n    fit <- auto.arima(Stock_df$Close,ic=\"bic\")\n    fit.forecast <- forecast.Arima(fit)\n    plot(fit.forecast,  main= Stock)\n    fit.forecast\n   \n })\n\n       #Auto.Arima1 - plot here  Tile#5\n     output$auto.arima1 <- renderTable({\n     #if (is.null(input$StockCode))\n     #  return()\n     library('quantmod')\n     library('ggplot2')\n     library('forecast')\n     library('tseries')\n\n     #Stock <- as.character(input$StockCode)\n      data <- eventReactive(input$click, {\n        (input$StockCode)\n       })\n      Stock <- as.character(data())\n      print(Stock)\n     #getSymbols(\"AAPL\", src = \"yahoo\",from=\"2017-07-01\")\n     # plot(AAPL$AAPL.Close)\n     Stock_df<-as.data.frame(getSymbols(Symbols = Stock,\n                                        src = \"yahoo\", from = \"2016-01-01\", env = NULL))\n     Stock_df$Open = Stock_df[,1]\n     Stock_df$High = Stock_df[,2]\n     Stock_df$Low = Stock_df[,3]\n     Stock_df$Close = Stock_df[,4]\n     Stock_df$Volume = Stock_df[,5]\n     Stock_df$Adj = Stock_df[,6]\n     Stock_df <- Stock_df[,c(7,8,9,10,11,12)]\n\n     #plot(as.ts(Stock_df$Close))\n\n     Stock_df$v7_MA = ma(Stock_df$Close, order=7)\n     Stock_df$v30_MA <- ma(Stock_df$Close, order=30)\n\n     #STL\n     rental_ma <- ts(na.omit(Stock_df$v7_MA), frequency=30)\n     decomp_rental <- stl(rental_ma, s.window=\"periodic\")\n     #plot(decomp_rental)\n     adj_rental <- seasadj(decomp_rental)\n     #plot(adj_rental)\n\n\n     #arima\n     fit <- auto.arima(Stock_df$Close,ic=\"bic\")\n     fit.forecast <- forecast.Arima(fit)\n     #plot(fit.forecast,   col = \"red\")\n     (fit.forecast)\n   })\n     \n     #Auto.Arima Seasonal \n     output$arima.seasonal <- renderPlot({\n       if (input$seasonal == \"NonSeasonal\")\n         return()\n       library('quantmod')\n       library('ggplot2')\n       library('forecast')\n       library('tseries')\n       \n       #Stock <- as.character(input$StockCode)\n       data <- eventReactive(input$click, {\n         (input$StockCode)\n       })\n       Stock <- as.character(data())\n       print(Stock)\n       #getSymbols(\"AAPL\", src = \"yahoo\",from=\"2017-07-01\")\n       # plot(AAPL$AAPL.Close)\n       Stock_df<-as.data.frame(getSymbols(Symbols = Stock,\n                                          src = \"yahoo\", from = \"2016-01-01\", env = NULL))\n       Stock_df$Open = Stock_df[,1]\n       Stock_df$High = Stock_df[,2]\n       Stock_df$Low = Stock_df[,3]\n       Stock_df$Close = Stock_df[,4]\n       Stock_df$Volume = Stock_df[,5]\n       Stock_df$Adj = Stock_df[,6]\n       Stock_df <- Stock_df[,c(7,8,9,10,11,12)]\n       \n       #plot(as.ts(Stock_df$Close))\n       \n       Stock_df$v7_MA = ma(Stock_df$Close, order=7)\n       Stock_df$v30_MA <- ma(Stock_df$Close, order=30)\n       \n       #STL\n       rental_ma <- ts(na.omit(Stock_df$v7_MA), frequency=30)\n       decomp_rental <- stl(rental_ma, s.window=\"periodic\")\n       #plot(decomp_rental)\n       adj_rental <- seasadj(decomp_rental)\n       #plot(adj_rental)\n       \n       \n       #arima\n       #fit <- auto.arima(Stock_df$Close,ic=\"bic\")\n       #fit.forecast <- forecast.Arima(fit)\n       #plot(fit.forecast,   col = \"red\")\n       #(fit.forecast)\n       fit_s<-auto.arima(adj_rental, seasonal=TRUE)\n       fcast_s <- forecast.Arima(fit_s, h=10)\n       plot(fcast_s)\n     })\n     \n     #Auto.Arima Seasonal \n     output$arima.seasonal1 <- renderTable({\n       #if (is.null(input$StockCode))\n       #  return()\n       if (input$seasonal == \"NonSeasonal\")\n         return()\n       library('quantmod')\n       library('ggplot2')\n       library('forecast')\n       library('tseries')\n       \n       #Stock <- as.character(input$StockCode)\n       data <- eventReactive(input$click, {\n         (input$StockCode)\n       })\n       Stock <- as.character(data())\n       print(Stock)\n       #getSymbols(\"AAPL\", src = \"yahoo\",from=\"2017-07-01\")\n       # plot(AAPL$AAPL.Close)\n       Stock_df<-as.data.frame(getSymbols(Symbols = Stock,\n                                          src = \"yahoo\", from = \"2016-01-01\", env = NULL))\n       Stock_df$Open = Stock_df[,1]\n       Stock_df$High = Stock_df[,2]\n       Stock_df$Low = Stock_df[,3]\n       Stock_df$Close = Stock_df[,4]\n       Stock_df$Volume = Stock_df[,5]\n       Stock_df$Adj = Stock_df[,6]\n       Stock_df <- Stock_df[,c(7,8,9,10,11,12)]\n       \n       #plot(as.ts(Stock_df$Close))\n       \n       Stock_df$v7_MA = ma(Stock_df$Close, order=7)\n       Stock_df$v30_MA <- ma(Stock_df$Close, order=30)\n       \n       #STL\n       rental_ma <- ts(na.omit(Stock_df$v7_MA), frequency=30)\n       decomp_rental <- stl(rental_ma, s.window=\"periodic\")\n       #plot(decomp_rental)\n       adj_rental <- seasadj(decomp_rental)\n       #plot(adj_rental)\n       \n       \n       #arima\n       #fit <- auto.arima(Stock_df$Close,ic=\"bic\")\n       #fit.forecast <- forecast.Arima(fit)\n       #plot(fit.forecast,   col = \"red\")\n       #(fit.forecast)\n      fit_s<-auto.arima(adj_rental, seasonal=TRUE)\n      fcast_s <- forecast.Arima(fit_s, h=10)\n      fcast_s\n     })\n     \n     \n  output$scatter1 <- renderPlot({\n    spread <- as.numeric(input$spread) / 100\n    x <- rnorm(1000)\n    y <- x + rnorm(1000) * spread\n    plot(x, y, pch = \".\", col = \"blue\")\n  })\n\n  output$scatter2 <- renderPlot({\n    spread <- as.numeric(input$spread) / 100\n    x <- rnorm(1000)\n    y <- x + rnorm(1000) * spread\n    plot(x, y, pch = \".\", col = \"red\")\n  })\n  \n  \n}\n\nshinyApp(ui, server)\n",
    "created" : 1520207974691.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "3582228556",
    "id" : "6C245BB8",
    "lastKnownWriteTime" : 1508670588,
    "path" : "E:/personal project/R-Shiny/time-series example/Stock_app.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}